{"version":3,"file":"static/js/172.bdabc4f3.chunk.js","mappings":"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","sources":["components/Authentication/SignUp.jsx","webpack://hyper-bikes/./src/components/Authentication/loginStyles.module.css?f426"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useMediaQuery } from '@mui/material';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { signUpHandler, resetError } from \"../../features/userSlice\";\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport desktopImg from '../../assets/Authentication/auth.webp'\r\nimport loginStyles from './loginStyles.module.css'\r\n\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport Toaster from \"../Utility/Toaster\";\r\nimport Loader from \"../Utility/Loader\";\r\n\r\nconst SignUp = () => {\r\n    const is700 = useMediaQuery('(max-width:700px)');\r\n    const isMedium = useMediaQuery('(max-width:990px)');\r\n\r\n    const dispatch = useDispatch();\r\n    const { error, loading, success } = useSelector(state => state.user);\r\n\r\n    const schema = yup.object().shape({\r\n        firstName: yup\r\n                    .string('First name must be a string')\r\n                    .required('First name is required')\r\n                    .trim(),\r\n        lastName: yup\r\n                    .string('Last name must be a string')\r\n                    .required('Last name is required')\r\n                    .trim(),\r\n        email: yup\r\n                .string('Email must be a string')\r\n                .email('Please provide a valid email')\r\n                .required('Email is required')\r\n                .trim(),\r\n        password: yup\r\n                    .string('Password must be a string')\r\n                    .required('Password is required')\r\n                    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n                        \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"),\r\n        confirmPassword: yup\r\n                            .string('Confirm password must be a string')\r\n                            .required('Confirm password is required')\r\n                            .oneOf([yup.ref('password')], 'Passwords must match'),\r\n        state: yup\r\n                .string('State must be a string')\r\n                .required('State is required')\r\n                .trim(),\r\n        country: yup\r\n                .string('Country must be a string')\r\n                .required('Country is required')\r\n                .trim()\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            state: '',\r\n            country: ''\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: (values, {setSubmitting}) => {\r\n            \r\n            // console.log(values)\r\n            dispatch(signUpHandler(values))\r\n                .finally(() => setSubmitting(false));\r\n        }\r\n    })\r\n\r\n    const { setErrors, submitCount, isValid } = formik;\r\n\r\n    useEffect(() => {\r\n        dispatch(resetError())\r\n        window.scrollTo(0,0)\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n            \r\n        // console.log('useEffect error ',error, 'loading ', !loading, 'success ',success )\r\n\r\n        if (!loading && success && error) {\r\n            if (typeof error !== 'string') {\r\n                setErrors(error)\r\n            }\r\n        }\r\n    }, [loading, error, setErrors, success])\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    backgroundImage: `url(${desktopImg} )`,\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"cover\",\r\n                    backgroundPosition: { mobile: \"bottom\", tablet:\"right center\"},\r\n                    height: `calc(100vh + ${isMedium ? '70px' : '80px'})`,\r\n                    width: 'auto',\r\n                    py: 8\r\n                }}\r\n            >\r\n                \r\n                <Paper\r\n                    elevation={12}\r\n                    sx={{\r\n                        marginX: 'auto',\r\n                        marginTop: '0px',\r\n                        height: 'auto',\r\n                        width: { mobile:'90%', tablet:'600px'},\r\n                        backgroundColor: 'customWhite.main',\r\n                        opacity: `.8`,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-around',\r\n                        paddingBottom: 7.5,\r\n                        px: 10\r\n                    }}\r\n                >\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        component=\"p\"\r\n                        textAlign='center'\r\n                        sx={{\r\n                            fontWeight: '600',                            \r\n                            color: 'black',\r\n                            my: 5,\r\n                            ...(is700 && {\r\n                                fontSize: '1.5rem'\r\n                            })\r\n                        }}\r\n                    >\r\n                        SIGN UP\r\n                    </Typography>\r\n                    <form\r\n                        className={loginStyles.formClass}\r\n                        onSubmit={formik.handleSubmit}\r\n                        noValidate\r\n                    >\r\n                        <TextField\r\n                            id='firstName'\r\n                            label='first name'\r\n                            type='text'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.firstName)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.firstName && formik.errors.firstName ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.firstName && formik.errors.firstName}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='lastName'\r\n                            label='last name'\r\n                            type='text'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.lastName)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.lastName && formik.errors.lastName ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.lastName && formik.errors.lastName}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='email'\r\n                            label='email'\r\n                            type='email'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.email)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.email && formik.errors.email ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='password'\r\n                            label='password'\r\n                            type='password'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.password)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.password && formik.errors.password ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='confirmPassword'\r\n                            label='confirm password'\r\n                            type='password'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.confirmPassword)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.confirmPassword && formik.errors.confirmPassword ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.confirmPassword && formik.errors.confirmPassword}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='state'\r\n                            label='state'\r\n                            type='text'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.state)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.state && formik.errors.state ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.state && formik.errors.state}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            id='country'\r\n                            label='country'\r\n                            type='text'\r\n                            size='small'\r\n                            fullWidth={true}\r\n                            value={(formik.values.country)}\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            error={formik.touched.country && formik.errors.country ?\r\n                                true : false\r\n                            }\r\n                            helperText={formik.touched.country && formik.errors.country}\r\n                            sx={{\r\n                                marginBottom: `${is700 ? '15px' : '20px'}`\r\n                            }}\r\n                        />\r\n                            \r\n                \r\n                        <Button\r\n                            type='submit'\r\n                            disabled={formik.isSubmitting ? true : false}\r\n                            sx={{\r\n                                height: '40px',\r\n                                paddingX: 5,\r\n                                py: 2,\r\n                                width: 'auto',\r\n                                bgcolor: 'customBlack.main',\r\n                                color: 'customWhite.main',\r\n                                fontWeight: '600',\r\n                                ...(is700 && {\r\n                                    fontSize: '0.75rem',\r\n                                    height: '30px'\r\n                                }),\r\n                                '&:hover': {\r\n                                    bgcolor: 'customRed.main'\r\n                                }\r\n                            }}\r\n                        >\r\n                            SUBMIT\r\n                        </Button>\r\n                    </form>\r\n                    <Typography\r\n                        variant='subtitle2'\r\n                        sx={{\r\n                            marginX: 'auto',\r\n                            width: 'auto',\r\n                            ...(is700 && {\r\n                                fontSize: '0.75rem'\r\n                            })\r\n                        }}\r\n                    >\r\n                        {`Already have an account ? `}\r\n                        <Typography\r\n                            variant='subtitle2'\r\n                            component={Link}\r\n                            to='/login'\r\n                            sx={{\r\n                                \r\n                            ...(is700 && {\r\n                                fontSize: '0.75rem'\r\n                            })\r\n                            }}\r\n                        >Login</Typography>\r\n                    </Typography>\r\n                </Paper>\r\n\r\n            </Box>\r\n            {\r\n                !loading && error ?\r\n                <Toaster \r\n                    timer={2000}\r\n                    type={\"error\"}\r\n                    message={\r\n                        typeof error === 'string' ? \r\n                            error \r\n                                :\r\n                            Object.values(error).join(\"\\n\")\r\n                    }\r\n                />\r\n                :\r\n                <></>\r\n            }\r\n            {\r\n                !loading && success && !error  && submitCount > 0 && isValid ?\r\n                <Toaster timer={1500} message={\"Signup successfull !\"} />\r\n                :\r\n                <></>\r\n            }\r\n            {\r\n                loading ?\r\n                <Loader />\r\n\r\n                :\r\n                <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignUp;","// extracted by mini-css-extract-plugin\nexport default {\"formClass\":\"loginStyles_formClass__xbSJW\"};"],"names":["is700","useMediaQuery","isMedium","dispatch","useDispatch","useSelector","state","user","error","loading","success","schema","yup","shape","firstName","required","trim","lastName","email","password","matches","confirmPassword","oneOf","country","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","signUpHandler","finally","setErrors","submitCount","isValid","useEffect","resetError","window","scrollTo","sx","backgroundImage","desktopImg","backgroundRepeat","backgroundSize","backgroundPosition","mobile","tablet","height","width","py","elevation","marginX","marginTop","backgroundColor","opacity","display","flexDirection","justifyContent","paddingBottom","px","variant","component","textAlign","fontWeight","color","my","fontSize","className","loginStyles","handleSubmit","noValidate","id","label","type","size","fullWidth","value","onChange","handleChange","onBlur","handleBlur","touched","errors","helperText","marginBottom","disabled","isSubmitting","paddingX","bgcolor","Link","to","timer","message","Object","join"],"sourceRoot":""}
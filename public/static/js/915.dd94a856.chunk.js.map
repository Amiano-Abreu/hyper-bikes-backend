{"version":3,"file":"static/js/915.dd94a856.chunk.js","mappings":"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","sources":["components/Authentication/Login.jsx","webpack://hyper-bikes/./src/components/Authentication/loginStyles.module.css?f426"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginHandler, resetError } from \"../../features/userSlice\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { useMediaQuery } from '@mui/material';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nimport Loader from \"../Utility/Loader\"\r\nimport Toaster from \"../Utility/Toaster\"\r\n\r\nimport desktopImg from '../../assets/Authentication/auth.webp'\r\nimport loginStyles from './loginStyles.module.css'\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { error, loading, success } = useSelector(state => state.user);\r\n    \r\n    const isMedium = useMediaQuery('(max-width:990px)');\r\n    const is700 = useMediaQuery('(max-width:700px)');\r\n\r\n    const schema = yup.object().shape({\r\n        email: yup\r\n                .string('Email must be a string')\r\n                .email('Please provide a valid email')\r\n                .required('Email is required')\r\n                .trim(),\r\n        password: yup\r\n                    .string('Password must be a string')\r\n                    .required('Password is required')\r\n                    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n                        \"Must Contain 8 Characters with [a-z,A-Z,0-9,!@#$%...]\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: (values, {setSubmitting}) => {\r\n            \r\n            // console.log(\"values of login \", values)\r\n            dispatch(loginHandler(values))\r\n                .finally(() => setSubmitting(false))\r\n        }\r\n    })\r\n\r\n    const { submitCount, isValid, setErrors } = formik;\r\n\r\n    useEffect(() => {\r\n        dispatch(resetError())\r\n        window.scrollTo(0,0)\r\n    }, [dispatch])\r\n    \r\n    useEffect(() => {\r\n        \r\n        // console.log('useEffect error ',error, 'loading ', !loading, 'submitCount ',formik.submitCount )\r\n\r\n        if (!loading && success && error) {\r\n            if (typeof error !== 'string') {\r\n                setErrors(error)\r\n            }\r\n        }\r\n    }, [setErrors, loading, error, success])\r\n    \r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    backgroundImage: `url(${desktopImg} )`,\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"cover\",\r\n                    backgroundPosition: { mobile: \"bottom\", tablet:\"right center\"},\r\n                    height: `calc(100vh - ${isMedium ? '70px' : '80px'})`,\r\n                    width: 'auto',\r\n                    paddingTop: '75px'\r\n                }}\r\n            >\r\n                \r\n                <Paper\r\n                    elevation={12}\r\n                    sx={{\r\n                        marginX: 'auto',\r\n                        marginTop: '0px',\r\n                        height: 'auto',\r\n                        width: { mobile:'90%', tablet:'600px'},\r\n                        backgroundColor: 'customWhite.main',\r\n                        opacity: `.8`,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-around',\r\n                        paddingBottom: 7.5,\r\n                        px: 10\r\n                    }}\r\n                >\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        component=\"p\"\r\n                        textAlign='center'\r\n                        sx={{\r\n                            fontWeight: '600',                            \r\n                            color: 'black',\r\n                            my: 5,\r\n                            ...(is700 && {\r\n                                fontSize: '1.5rem'\r\n                            })\r\n                        }}\r\n                    >\r\n                        LOGIN\r\n                    </Typography>\r\n                    <form\r\n                        className={loginStyles.formClass}\r\n                        onSubmit={formik.handleSubmit}\r\n                        noValidate\r\n                    >\r\n                        {Object.keys(formik.values).map(input => {\r\n\r\n                            return (\r\n                                <TextField\r\n                                    key={input}\r\n                                    id={input}\r\n                                    label={String(input).toLowerCase()}\r\n                                    type={input}\r\n                                    fullWidth={true}\r\n                                    size='small'\r\n                                    value={(formik.values[input])}\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    error={formik.touched[input] && formik.errors[input] ?\r\n                                        true : false\r\n                                    }\r\n                                    helperText={formik.touched[input] && formik.errors[input]}\r\n                                    sx={{\r\n                                        marginBottom: `${is700 ? '10px' : '20px'}`\r\n                                    }}\r\n                                />\r\n                            )\r\n                        })}\r\n                        <Button\r\n                            type='submit'\r\n                            disabled={formik.isSubmitting ? true : false}\r\n                            sx={{\r\n                                height: '40px',\r\n                                paddingX: 5,\r\n                                py: 2,\r\n                                width: 'auto',\r\n                                bgcolor: 'customBlack.main',\r\n                                color: 'customWhite.main',\r\n                                fontWeight: '600',\r\n                                ...(is700 && {\r\n                                    fontSize: '0.75rem',\r\n                                    height: '30px'\r\n                                }),\r\n                                '&:hover': {\r\n                                    bgcolor: 'customRed.main'\r\n                                }\r\n                            }}\r\n                        >\r\n                            SUBMIT\r\n                        </Button>\r\n                    </form>\r\n                    <Typography\r\n                        variant='subtitle2'\r\n                        sx={{\r\n                            marginX: 'auto',\r\n                            width: 'auto',\r\n                            ...(is700 && {\r\n                                fontSize: '0.75rem'\r\n                            })\r\n                        }}\r\n                    >\r\n                        {`Don't have an account ? `}\r\n                        <Typography\r\n                            variant='subtitle2'\r\n                            component={Link}\r\n                            to='/signup'\r\n                            sx={{\r\n                                \r\n                            ...(is700 && {\r\n                                fontSize: '0.75rem'\r\n                            })\r\n                            }}\r\n                        >Sign up</Typography>\r\n                    </Typography>\r\n                </Paper>\r\n\r\n            </Box>\r\n            {\r\n                !loading && error ?\r\n                <Toaster \r\n                    timer={2000}\r\n                    type={\"error\"}\r\n                    message={\r\n                        typeof error === 'string' ? \r\n                            error \r\n                                :\r\n                            Object.values(error).join(\"\\n\")\r\n                    }\r\n                />\r\n                :\r\n                <></>\r\n            }\r\n            {\r\n                !loading && success && !error && submitCount > 0 && isValid ?\r\n                <Toaster timer={1500} message={\"Login successfull !\"} />\r\n                :\r\n                <></>\r\n            }\r\n            {\r\n                loading ?\r\n                <Loader />\r\n\r\n                :\r\n                <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","// extracted by mini-css-extract-plugin\nexport default {\"formClass\":\"loginStyles_formClass__xbSJW\"};"],"names":["dispatch","useDispatch","useSelector","state","user","error","loading","success","isMedium","useMediaQuery","is700","schema","yup","shape","email","required","trim","password","matches","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","loginHandler","finally","submitCount","isValid","setErrors","useEffect","resetError","window","scrollTo","sx","backgroundImage","desktopImg","backgroundRepeat","backgroundSize","backgroundPosition","mobile","tablet","height","width","paddingTop","elevation","marginX","marginTop","backgroundColor","opacity","display","flexDirection","justifyContent","paddingBottom","px","variant","component","textAlign","fontWeight","color","my","fontSize","className","loginStyles","handleSubmit","noValidate","Object","keys","map","input","id","label","String","toLowerCase","type","fullWidth","size","value","onChange","handleChange","onBlur","handleBlur","touched","errors","helperText","marginBottom","disabled","isSubmitting","paddingX","py","bgcolor","Link","to","timer","message","join"],"sourceRoot":""}